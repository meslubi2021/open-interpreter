%% Pareto Improving Allocations
% Specification (7) in Table B4

clc
clear all

load ('..\..\3Calibration_M\01ActualUSBaseline.mat') 

Au1=u;

global w z pz Nz N p theta gamma G n Au1

w=0.51;                                                     % Cost of formal child care based on 2010 average child care cost
z=0.1*[2.40 3.75 4.08 4.32 4.54 4.72 4.85 4.97 5.08 5.19 5.29 5.43 5.54 5.63 5.76 5.88 6 6.13 6.23 6.36 6.5 6.66 6.8 7.02 7.21 7.34 7.52 7.71 8.01 8.33 8.69 9 9.37 9.61 10 10.31 10.83 11.53 12.01 12.5 13.46 14 14.57 15.71 16.82 18.51 20 22.36 25.64 32.21];
                                                            % Market productivity type (normalised by dividing by 10)
Nz=50;
N=51;

%% e=24 ; gamma=1 ; w=0.51                                    
n=24;                                                       % Normalisation
gamma=1;                                                    % Effort felicity parameter
G=(3896)/(10*50*n);                                         % Government generosity when w=0.51
theta=1.27;                                                 % Effort cost type types                                                                                                                    

%% Empirical distributions
pz=0.02*ones(Nz,1);                                         % Distribution of z based on 2010 March CPS z distribution
p=0.11;                                                     % Probability of being unlucky

%% Optimisation

options=optimset('LargeScale','on','MaxFunEvals',10000000,'Display','Iter','MaxIter',1000000,'TolCon',1e-7,'TolX',1e-7);

% Initial values
init=0.5*ones(N,3);
% lb=1e-5*ones(N,3);
ub=100*ones(N,3);
for i=1:N
    ub(i,2)=1;
end

% e=24 ; gamma=1 ; w=0.51 ; Tol=1e-6; DIC and LUIC
init=[0.301521702767377 0.647680493699128 1.74315976878953e-08;0.302840329810624 0.646556409445863 0.000144911428273652;0.304359888504138 0.64332434075705 0.00177767033524294;0.304972777066271 0.639641105092709 0.0036604216112015;0.305733115170927 0.633092579483669 0.00699007655295733;0.306647739458601 0.622180561402357 0.0125377672443692;0.307521569271413 0.606853521591798 0.0203390241705726;0.308245374418582 0.587128366345548 0.0303876184428674;0.308937588186473 0.556139026295498 0.0461702922499299;0.309391414720566 0.50911452914433 0.0701281871341218;0.309168189822287 0.429486002928276 0.110664150404079;0.309168189822287 0.429486002928276 0.110664150404079;0.305761949117708 0.0712277750107757 0.298515811357617;0.318779912444874 0.024547468057538 0.338691629667395;0.332839465372989 0.0147920494867391 0.359609890974658;0.350111399162038 0.0100682677454509 0.381158450904446;0.367811471929367 0.0077029705271626 0.401730621572863;0.386398957500147 0.00622550177060618 0.422601082669948;0.406519487774716 0.00518615452139448 0.444700788041535;0.425393989911789 0.00451297306724581 0.4650789456539;0.447289476373111 0.00391875654293823 0.488375857326241;0.471763426542349 0.0034440142674387 0.514127419488253;0.500411630343946 0.00303488645608431 0.543926476009875;0.530104713150838 0.00272235635901772 0.574437818935014;0.573439606171024 0.00237126876489882 0.617881367802629;0.617065144985629 0.00213084814697061 0.661016496500713;0.65154599145261 0.00197391786047501 0.694873268517846;0.709571609880873 0.00176478615330347 0.750110060369129;0.772805766032809 0.00159502866907007 0.808615687593383;0.925742491314126 0.00132834468877987 0.940821564063059;1.01848522171985 0.00120835166932697 1.01812892981677;1.04797252888919 0.00116537795035607 1.04347418944381;1.05656653481845 0.00115946820822259 1.05151289308288;1.07505763929106 0.00113944064026673 1.0704515698036;1.11177102991988 0.00109713593628002 1.1094421058997;1.19532776018382 0.00101826431101543 1.20050642710713;1.26844162621043 0.000955467628370967 1.27939871367254;1.32760491174342 0.000903428416910728 1.34494301931248;1.34835175246575 0.000872645939040319 1.36901249928113;1.35471736755979 0.000853080573665158 1.37712280281741;1.35738343825246 0.000827118310680451 1.38081206229371;1.4376092542969 0.000768285432279468 1.5084473724246;1.49934961191663 0.000721507456692078 1.60698685163562;1.50898374014618 0.000696116476610399 1.62296529517026;1.71904378672646 0.000600641505702541 1.98746704446009;1.83882636520417 0.000547399619591147 2.19316663311444;2.37076150965254 0.000438453468542511 3.07204961451734;2.73117844772627 0.000389419127758317 3.61903543346429;3.21879990428645 0.000335416823599745 4.39165500437333;4.37038254123055 0.000267800319728809 6.20569781088279;9.49739007848556 0.00017450515183466 13.1757552159176];

x=fmincon(@(x) V(x),init,[],[],[],[],[],ub,@(x) mycon(x),options);

beep

%% Expost check of LDIC binding and UIC satisfied
% LDIC
for r=1:N-1
    K(r)=((x(r,1)-(1/theta)*((((x(r,3)/z(r))+x(r,2))^(1+gamma))/(1+gamma))))-((x(r+1,1)-(1/theta)*((((x(r+1,3)/z(r))+x(r+1,2))^(1+gamma))/(1+gamma))));
end 
nobind1=sum(K<-0.01)
nobind2=sum(K>0.01)
% UIC
for r=2:N-1
    for s=1:N-2
        if r+s<N+1 & x(r+s,1)-(1/theta)*((((x(r+s,3)/z(r-1))+x(r+s,2))^(1+gamma))/(1+gamma))>0
            D(N*r-2*N+s)=((x(r+s,1)-(1/theta)*((((x(r+s,3)/z(r-1))+x(r+s,2))^(1+gamma))/(1+gamma))))-((x(r,1)-(1/theta)*((((x(r,3)/z(r-1))+x(r,2))^(1+gamma))/(1+gamma))));
        else
            D(N*r-2*N+s)=0;
        end
    end  
end
bind=sum(D>0.01)

%% Optimal Allocations

wage=10*[0 z];
earnings=10*n*50*x(:,3)/1000;
consumption=10*n*50*x(:,1)/1000;
care=x(:,2);
formal=10*n*50*w*(1-x(:,2))/1000;

wedge(1)=1-(1/w)*((1/theta)*((x(1,2))^gamma));
for r=2:N
    if x(r,3)>0.08
        wedge(r)=1-(1/z(r-1))*((1/theta)*(((x(r,3)/z(r-1))+x(r,2))^gamma));
    else 
        wedge(r)=1-(1/w)*((1/theta)*((x(r,2))^gamma));
    end
end             
                
for r=1:N
    if care(r,1)<1 & x(r,3)>0.08
        subsidy(r)=min(1,max(0,(1-((1/w)*((1/theta)*((x(r,3)/z(50))+x(r,2))^gamma)))));
    else 
        subsidy(r)=0;
    end
end

for r=1:1
    u(r)=x(r,1)-(1/theta)*(((x(r,2))^(1+gamma))/(1+gamma));
end
for r=2:N
    u(r)=x(r,1)-(1/theta)*((((x(r,3)/z(r-1))+x(r,2))^(1+gamma))/(1+gamma));
end

u=u*(10*n*50)/1000;

x
init0=mat2str(x)
earnings0=mat2str(earnings)
care0=mat2str(care)
consumption0=mat2str(consumption)
wedge0=mat2str(wedge)
subsidy0=mat2str(subsidy)
u0=mat2str(u)

nowork=x(:,3)<0.08;                                                        % No. of unemployed
firstwork=sum(nowork)+1;                                                   % Index of first employed z 
earn=earnings(firstwork:N);
sub=subsidy(firstwork:N);
earn0=mat2str(earn)
sub0=mat2str(sub)
                                                                  
save ParetoBaseline

beep