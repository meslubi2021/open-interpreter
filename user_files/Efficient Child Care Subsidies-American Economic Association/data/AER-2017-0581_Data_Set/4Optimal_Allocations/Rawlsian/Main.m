%% Optimal Allocations
% Rawlsian SWF, specification (5) in Table B4

clc
clear all

global w z pz Nz N p theta gamma G 

w=0.51;                                                     % Cost of formal child care based on 2010 average child care cost
z=0.1*[2.40 3.75 4.08 4.32 4.54 4.72 4.85 4.97 5.08 5.19 5.29 5.43 5.54 5.63 5.76 5.88 6 6.13 6.23 6.36 6.5 6.66 6.8 7.02 7.21 7.34 7.52 7.71 8.01 8.33 8.69 9 9.37 9.61 10 10.31 10.83 11.53 12.01 12.5 13.46 14 14.57 15.71 16.82 18.51 20 22.36 25.64 32.21];
                                                            % Market productivity type (normalised by dividing by 10)
Nz=50;
N=51;

%% e=24 ; gamma=1 ; w=0.51                                    
n=24;                                                       % Normalisation
gamma=1;                                                    % Effort felicity parameter
G=(3896)/(10*50*n);                                         % Government generosity when w=0.51
theta=1.27;                                                 % Effort cost type types

%% Empirical distributions
pz=0.02*ones(Nz,1);                                         % Distribution of z based on 2010 March CPS z distribution
p=0.11;                                                     % Probability of being unlucky

%% Optimisation

options=optimset('LargeScale','on','MaxFunEvals',1000000,'Display','Iter','MaxIter',100000,'TolCon',1e-6,'TolX',1e-6);

% Initial values
init=0.8*ones(N,3);
% lb=1e-5*ones(N,3);
ub=100*ones(N,3);
for i=1:N
    ub(i,2)=1;
end

% e=24 ; gamma=1 ; w=0.51 ; tol=1e-6; LDIC & LUIC
init=[0.531039669326954 0.649045180702941 8.57363997369838e-08;0.528727380859388 0.644283364451255 3.7136241092698e-05;0.528747741909855 0.643972709514215 0.000127647520791855;0.529362204877454 0.644247667598616 0.000442936854954411;0.528975103694045 0.642906693146667 0.000602878437552342;0.529967688435361 0.644825210933354 0.000489214477565952;0.528597413161196 0.641738456011338 0.000507550610215346;0.530669619205886 0.645302908229969 0.000553510922187771;0.530961289498267 0.64510235548657 0.000704568258483331;0.52929039209535 0.640945466969756 0.000865978593982065;0.531125850106247 0.643866827481971 0.000957379324404765;0.530181314632721 0.641107028026664 0.0011148271719138;0.533951240935439 0.647058772143375 0.00154412748928532;0.532382733138651 0.642562456274908 0.00189331922016893;0.531854601684156 0.640316682939857 0.00212569421816663;0.53121104313231 0.637127756099209 0.00279855191169986;0.532980150686906 0.638627760041393 0.00359269523745317;0.533119370508435 0.636650715997715 0.00456992851380032;0.533135632077059 0.633324233662944 0.00625606713697842;0.532799531354874 0.630631004380881 0.00721167407965463;0.531395838971926 0.620310951390692 0.0117718085291614;0.530734319480137 0.598229533946804 0.0251124262184094;0.521923961807107 0.512218873127289 0.0704205049757278;0.50561382738353 0.449395897439253 0.0895416370076386;0.448676512766489 0.0451234955245185 0.2726637593942;0.462726628437079 0.0184523173012135 0.32078982903591;0.466852066532848 0.015128933045995 0.33142728989055;0.472515640154475 0.0122897010248965 0.345090803628718;0.475218708384411 0.012129631996466 0.350779146364674;0.482997001232668 0.00831932602808674 0.370880790188582;0.492774607492596 0.00666003515472648 0.394311476095391;0.519385291188158 0.00501500175519677 0.455023263820866;0.532115868176152 0.00423058102234948 0.483292000976497;0.581802924508136 0.00309426262348367 0.587111202604567;0.587301150748641 0.00291488974518797 0.598007105705598;0.613794682929488 0.00240150045987048 0.652014479083853;0.618257139955591 0.00231557409016412 0.661121813212151;0.625429211356709 0.00217595588149965 0.677049898136148;0.730643463322925 0.00165852869980401 0.901892988614206;0.759308812785703 0.00146248962039988 0.958338226289213;0.762619474822693 0.00145044580835608 0.965005977168906;0.983955569707416 0.00110146697377785 1.39605686678396;1.03856673516631 0.00106939238081342 1.49005125604343;1.04407445865419 0.000940174627734324 1.49998523087231;1.21293529668277 0.000826498375701508 1.81863927718082;1.29421512762059 0.000788334396363058 1.97239427401949;1.75092110922666 0.000590948051840722 2.80412269510048;1.996092574977 0.000576318549896594 3.21732749390999;2.65769507958517 0.000360701643344676 4.33026055320552;3.7958657216951 0.000505354521925485 6.1434905561202;8.95202622064637 0.000419420694346119 13.1752007450995];

x=fmincon(@(x) V(x),init,[],[],[],[],[],ub,@(x) mycon(x),options);

beep

%% Expost check of LDIC binding and UIC satisfied
% LDIC
for r=1:N-1
    K(r)=((1+x(r,1)-(1/theta)*((((x(r,3)/z(r))+x(r,2))^(1+gamma))/(1+gamma))))-((1+x(r+1,1)-(1/theta)*((((x(r+1,3)/z(r))+x(r+1,2))^(1+gamma))/(1+gamma))));
end 
nobind1=sum(K<-0.01)
nobind2=sum(K>0.01)
% UIC
for r=2:N-1
    for s=1:N-2
        if r+s<N+1 & 1+x(r+s,1)-(1/theta)*((((x(r+s,3)/z(r-1))+x(r+s,2))^(1+gamma))/(1+gamma))>0
            D(N*r-2*N+s)=((1+x(r+s,1)-(1/theta)*((((x(r+s,3)/z(r-1))+x(r+s,2))^(1+gamma))/(1+gamma))))-((1+x(r,1)-(1/theta)*((((x(r,3)/z(r-1))+x(r,2))^(1+gamma))/(1+gamma))));
        else
            D(N*r-2*N+s)=0;
        end
    end  
end
bind=sum(D>0.01)

%% Optimal Allocations

wage=10*[0 z];
earnings=10*n*50*x(:,3)/1000;
consumption=10*n*50*x(:,1)/1000;
care=x(:,2);
formal=10*n*50*w*(1-x(:,2))/1000;

wedge(1)=1-(1/w)*((1/theta)*((x(1,2))^gamma));
for r=2:N
    if x(r,3)>0.08
        wedge(r)=1-(1/z(r-1))*((1/theta)*(((x(r,3)/z(r-1))+x(r,2))^gamma));
    else 
        wedge(r)=1-(1/w)*((1/theta)*((x(r,2))^gamma));
    end
end             
                
for r=1:N
    if care(r,1)<1 & x(r,3)>0.08
        subsidy(r)=min(1,max(0,(1-((1/w)*((1/theta)*((x(r,3)/z(50))+x(r,2))^gamma)))));
    else 
        subsidy(r)=0;
    end
end

for r=1:1
    u(r)=x(r,1)-(1/theta)*(((x(r,2))^(1+gamma))/(1+gamma));
end
for r=2:N
    u(r)=x(r,1)-(1/theta)*((((x(r,3)/z(r-1))+x(r,2))^(1+gamma))/(1+gamma));
end

u=u*(10*n*50)/1000;


x
init0=mat2str(x)
earnings0=mat2str(earnings)
care0=mat2str(care)
consumption0=mat2str(consumption)
wedge0=mat2str(wedge)
subsidy0=mat2str(subsidy)
u0=mat2str(u)

nowork=x(:,3)<0.08;                                                        % No. unemployed
firstwork=sum(nowork)+1;                                                   % Index of first z that works
earn=earnings(firstwork:N);
sub=subsidy(firstwork:N);
earn0=mat2str(earn)
sub0=mat2str(sub)

save Rawlsian.mat

beep

